// Generated by CoffeeScript 1.6.1
(function() {

  define(["jquery"], function($) {
    var Actor, Prlx,
      _this = this;
    Actor = (function() {

      function Actor(options, prlx) {
        var _this = this;
        _.extend(this, options);
        $(window).on('resize ready', function() {
          var adjustment;
          _this.el_top = $(_this.el).offset().top;
          adjustment = prlx.test(_this);
          if (adjustment) {
            return _this.make_adjustment(adjustment);
          }
        });
      }

      return Actor;

    })();
    Prlx = (function() {
      var document_height, prefix, prefixed_properties, scroll_bottom, scroll_top, window_height;

      prefix = (function() {
        var pre, styles;
        styles = window.getComputedStyle(document.documentElement, '');
        pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o']))[1];
        return "-" + pre + "-";
      })();

      prefixed_properties = {
        "border-radius": true,
        "transform": true,
        "perspective": true,
        "perspective-origin": true,
        "box-shadow": true,
        "background-size": true
      };

      document_height = $(document).height();

      window_height = $(window).height();

      scroll_top = $(window).scrollTop();

      scroll_bottom = scroll_top + window_height;

      function Prlx(elements, options, fn) {
        var actors, args, el, number, property, running, unit, val, _i, _len,
          _this = this;
        this.test = function(actor) {
          return Prlx.prototype.test.apply(_this, arguments);
        };
        console.log(this);
        this.window = $(window);
        actors = [];
        running = false;
        for (property in options) {
          val = options[property];
          args = val.match(/\S+/g);
          number = args[0].match(/[1-9](?:\d{0,2})(?:,\d{3})*(?:\.\d*[1-9])?|0?\.\d*[1-9]|0/g);
          unit = args[0].match(/[a-z]+/ig);
          for (_i = 0, _len = elements.length; _i < _len; _i++) {
            el = elements[_i];
            actors.push(new Actor({
              el: $(el),
              el_top: $(el).offset().top,
              el_height: $(el).height(),
              property: property,
              maximum_distance: number,
              unit: unit || void 0,
              acceleration_rate: args[1],
              trigger: args[2],
              make_adjustment: this.computeAdjustment(property, unit, $(el))
            }, this));
          }
        }
        this.window.on('resize', function() {
          return window_height = _this.window.height();
        });
        this.window.on('scroll', function(event) {
          scroll_top = _this.window.scrollTop();
          scroll_bottom = scroll_top + window_height;
          if (!running) {
            requestAnimationFrame(function() {
              var actor, adjustment, _j, _len1;
              for (_j = 0, _len1 = actors.length; _j < _len1; _j++) {
                actor = actors[_j];
                adjustment = _this.test(actor);
                if (adjustment) {
                  actor.make_adjustment(adjustment);
                }
              }
              return running = false;
            });
          }
          return running = true;
        });
      }

      Prlx.prototype.test = function(actor) {
        var adjustment, current_el_position, new_el_position, old_position;
        current_el_position = (this.positionOfElement.call(actor)) / 2;
        if (current_el_position !== old_position && this.isElPartiallyVisible.call(actor)) {
          new_el_position = Math.min(Math.pow(current_el_position, actor.acceleration_rate), 1);
          adjustment = actor.maximum_distance * new_el_position;
        } else {
          return false;
        }
        old_position = current_el_position;
        return adjustment;
      };

      Prlx.prototype.computeAdjustment = function(property, unit, el) {
        if (prefixed_properties[property]) {
          return function(adjustment) {
            return el.css("" + prefix + "property", adjustment);
          };
        } else if (property === 'rotate' || property === 'skew' || property === 'scale') {
          return function(adjustment) {
            return el.css("" + prefix + "transform", "" + property + "(" + adjustment + (unit || '') + ")");
          };
        } else {
          return function(adjustment) {
            return el.css(property, "" + adjustment + unit);
          };
        }
      };

      Prlx.prototype.positionOfElement = function() {
        return (this.el_top - scroll_top + this.el_height) / (scroll_bottom - scroll_top + this.el_height);
      };

      Prlx.prototype.isElFullyVisible = function() {
        var _ref;
        return ((scroll_bottom - this.el_height) > (_ref = this.el_top) && _ref > scroll_top);
      };

      Prlx.prototype.isElPartiallyVisible = function() {
        var _ref;
        return (scroll_bottom > (_ref = this.el_top) && _ref > (scroll_top - this.el_height));
      };

      return Prlx;

    })();
    return (function($) {
      return $.fn.prlx = function(options, fn) {
        return new Prlx($(this), options);
      };
    })(jQuery);
  });

}).call(this);
