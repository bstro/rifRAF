// Generated by CoffeeScript 1.6.1
(function() {
  var Actor, Prlx,
    _this = this;

  Actor = (function() {

    Actor.actors || (Actor.actors = {});

    Actor._id = 0;

    function Actor(el, options) {
      this.actions || (this.actions = []);
      Actor._id++;
      if (Actor.actors[el.prlx_id]) {
        this.parseOptions(options, Actor.actors[el.prlx_id].actions);
      } else {
        Actor.actors["c" + Actor._id] = this;
        el.prlx_id = "c" + Actor._id;
        this.parseOptions(options, this.actions);
      }
      console.log(Actor.actors);
    }

    Actor.prototype.parseOptions = function(options, collection) {
      var args, property, start, stop, unit, val, _results;
      _results = [];
      for (property in options) {
        val = options[property];
        args = val.match(/\S+/g);
        start = args[0].match(/-?\d+(\.\d+)?/g);
        stop = args[1].match(/-?\d+(\.\d+)?/g);
        unit = args[0].match(/[a-z]+/ig);
        _results.push(collection.push({
          'property': property,
          'start': start != null ? start[0] : void 0,
          'stop': stop != null ? stop[0] : void 0,
          'unit': unit != null ? unit[0] : void 0
        }));
      }
      return _results;
    };

    return Actor;

  })();

  Prlx = (function() {
    var document_height, prefix, prefixed_properties, scroll_bottom, scroll_top, window_height;

    prefix = (function() {
      var pre, styles;
      styles = window.getComputedStyle(document.documentElement, '');
      pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o']))[1];
      return "-" + pre + "-";
    })();

    prefixed_properties = {
      "border-radius": true,
      "transform": true,
      "perspective": true,
      "perspective-origin": true,
      "box-shadow": true,
      "background-size": true
    };

    document_height = $(document).height();

    window_height = $(window).height();

    scroll_top = $(window).scrollTop();

    scroll_bottom = scroll_top + window_height;

    function Prlx(elements, options, fn) {
      var actors, running,
        _this = this;
      this.test = function(actor) {
        return Prlx.prototype.test.apply(_this, arguments);
      };
      this.window = $(window);
      actors = [];
      running = false;
      elements.each(function() {
        return new Actor(this, options);
      });
      this.window.on('resize', function() {
        return window_height = _this.window.height();
      });
      this.window.on('scroll', function(event) {
        scroll_top = _this.window.scrollTop();
        scroll_bottom = scroll_top + window_height;
        if (!running) {
          requestAnimationFrame(function() {
            var actor, _i, _len, _ref;
            _ref = Actor.actors;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              actor = _ref[_i];
              _this.make_adjustment(_this.test(actor));
            }
            return running = false;
          });
        }
        return running = true;
      });
    }

    Prlx.prototype.test = function(actor) {
      var adjustment, current_el_position, delta, old_position;
      current_el_position = this.yPositionOfElement.call(actor);
      delta = actor.start - actor.end;
      if (current_el_position !== old_position) {
        adjustment = current_el_position * delta;
      } else {
        return false;
      }
      old_position = current_el_position;
      return adjustment;
    };

    Prlx.prototype.computeAdjustment = function(property, unit, el) {
      return function(adjustment) {
        if (adjustment) {
          if (prefixed_properties[property]) {
            return el.css("" + prefix + "property", adjustment);
          } else if (property === 'rotate' || property === 'skew' || property === 'scale') {
            return el.css("" + prefix + "transform", "" + property + "(" + adjustment + (unit || '') + ")");
          } else {
            return el.css(property, "" + adjustment + unit);
          }
        }
      };
    };

    Prlx.prototype.yPositionOfElement = function() {
      return (this.el_top - scroll_top + this.el_height) / (scroll_bottom - scroll_top + this.el_height);
    };

    Prlx.prototype.isElFullyVisible = function() {
      var _ref;
      return ((scroll_bottom - this.el_height) > (_ref = this.el_top) && _ref > scroll_top);
    };

    Prlx.prototype.isElPartiallyVisible = function() {
      var _ref;
      return (scroll_bottom > (_ref = this.el_top) && _ref > (scroll_top - this.el_height));
    };

    return Prlx;

  })();

  (function($) {
    return $.fn.prlx = function(options) {
      return new Prlx($(this), options);
    };
  })(jQuery);

}).call(this);
