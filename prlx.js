// Generated by CoffeeScript 1.3.3
(function() {
  var prlx,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  prlx = (function() {
    var $document, $window, document_height, prefixed_elements, running, scroll_bottom, scroll_top, vendor_prefixes, window_height;

    $window = $(window);

    $document = $(document);

    vendor_prefixes = ["-webkit-", "-moz-", "-ms-", "-o-"];

    prefixed_elements = ["border-radius", "transform", "perspective", "perspective-origin", "box-shadow", "background-size"];

    document_height = $document.height();

    window_height = $window.height();

    scroll_top = $window.scrollTop();

    scroll_bottom = scroll_top + prlx.window_height;

    running = false;

    function prlx(el, options, fn) {
      var increment_by, limit, prop, trigger_at, val, _ref,
        _this = this;
      this.el = el;
      this.options = options;
      this.findPositionOfPageScrolled = __bind(this.findPositionOfPageScrolled, this);

      this.findPositionOfElement = __bind(this.findPositionOfElement, this);

      this.isElPartiallyVisible = __bind(this.isElPartiallyVisible, this);

      this.isElFullyVisible = __bind(this.isElFullyVisible, this);

      this.move = __bind(this.move, this);

      this.requestFrameIfNecessary = __bind(this.requestFrameIfNecessary, this);

      this.el_top = this.el.offset().top;
      this.el_height = this.el.height();
      _ref = this.options;
      for (prop in _ref) {
        val = _ref[prop];
        options = val.match(/\S+/g);
        limit = options[0];
        increment_by = options[1];
        trigger_at = options[2];
      }
      console.log(options);
      $window.on('resize', function() {
        return _this.window_height = $window.height();
      });
      $window.on('scroll', function() {
        scroll_top = $window.scrollTop();
        scroll_bottom = scroll_top + window_height;
        return _this.requestFrameIfNecessary();
      });
    }

    prlx.prototype.requestFrameIfNecessary = function() {
      if (!this.running) {
        requestAnimationFrame(this.move);
      }
      return this.running = true;
    };

    prlx.prototype.move = function() {
      console.log(this.findPositionOfElement());
      return this.running = false;
    };

    prlx.prototype.isElFullyVisible = function() {
      var _ref;
      this.el.trigger('prlx:fullyVisible');
      if (((this.scroll_bottom - this.el_height) > (_ref = this.el_top) && _ref > this.scroll_top)) {
        return true;
      }
    };

    prlx.prototype.isElPartiallyVisible = function() {
      var _ref;
      this.el.trigger('prlx:partiallyVisible');
      if ((this.scroll_bottom > (_ref = this.el_top) && _ref > this.scroll_top - this.el_height)) {
        return true;
      }
    };

    prlx.prototype.findPositionOfElement = function() {
      return (this.el_top - scroll_top + this.el_height) / (scroll_bottom - scroll_top + this.el_height);
    };

    prlx.prototype.findPositionOfPageScrolled = function() {
      return scroll_top / (document_height - window_height);
    };

    prlx.prototype.isFunction = function(obj) {
      return !!(obj && obj.constructor && obj.call && obj.apply);
    };

    prlx.prototype.isObject = function(obj) {
      return obj === Object(obj);
    };

    return prlx;

  })();

  $.fn.prlx = function(options, fn) {
    return $.each(this, function() {
      return new prlx($(this), options);
    });
  };

}).call(this);
