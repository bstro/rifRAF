// Generated by CoffeeScript 1.6.1
(function() {
  var Prlx,
    _this = this;

  Prlx = (function() {
    var Actor, prefixed_properties, vendor_prefixes,
      _this = this;

    Actor = (function() {

      function Actor(options, instance) {
        var _this = this;
        this.options = options;
        this.instance = instance;
        this.test = function() {
          return Actor.prototype.test.apply(_this, arguments);
        };
        this.old_position;
        this.instance.el.bind('test', function() {
          var adjustment;
          adjustment = _this.test();
          if (adjustment) {
            return _this.instance.queue.push(_this.options.partial_adjustment(adjustment));
          }
        });
      }

      Actor.prototype.test = function() {
        var adjustment, current_el_position, new_el_position;
        current_el_position = this.instance.positionOfElement();
        if (current_el_position !== this.old_position && this.instance.isElPartiallyVisible()) {
          new_el_position = Math.min(Math.pow(current_el_position, this.options.acceleration_rate), 1);
          adjustment = this.options.maximum_distance * new_el_position;
        } else {
          return false;
        }
        this.old_position = current_el_position;
        return adjustment;
      };

      return Actor;

    })();

    vendor_prefixes = ["-webkit-", "-moz-", "-ms-", "-o-"];

    prefixed_properties = {
      "border-radius": true,
      "transform": true,
      "perspective": true,
      "perspective-origin": true,
      "box-shadow": true,
      "background-size": true
    };

    function Prlx(el, options, fn) {
      var args, number, property, unit, val,
        _this = this;
      this.el = el;
      this.options = options;
      this.positionOfElement = function() {
        return Prlx.prototype.positionOfElement.apply(_this, arguments);
      };
      this.window = $(window);
      this.document = $(document);
      this.document_height = this.document.height();
      this.window_height = this.window.height();
      this.scroll_top = this.window.scrollTop();
      this.scroll_bottom = this.scroll_top + this.window_height;
      this.el_top = this.el.offset().top;
      this.el_height = this.el.height();
      this.running = false;
      this.queue = [];
      this.actors = [];
      for (property in options) {
        val = options[property];
        args = val.match(/\S+/g);
        number = args[0].match(/[1-9](?:\d{0,2})(?:,\d{3})*(?:\.\d*[1-9])?|0?\.\d*[1-9]|0/g);
        unit = args[0].match(/[a-z]+/ig);
        this.actors.push(new Actor({
          el: this.el,
          property: property,
          maximum_distance: number,
          unit: unit || void 0,
          acceleration_rate: args[1],
          trigger: args[2],
          partial_adjustment: this.computeAdjustment(property, unit)
        }, this));
      }
      this.window.on('resize', function() {
        return _this.window_height = _this.window.height();
      });
      this.window.on('scroll', function(event) {
        _this.event = event;
        _this.scroll_top = _this.window.scrollTop();
        _this.scroll_bottom = _this.scroll_top + _this.window_height;
        _this.el.trigger('test');
        if (!_this.running) {
          requestAnimationFrame(function() {
            while (_this.queue.length) {
              _this.queue.pop();
            }
            return _this.running = false;
          });
        }
        return _this.running = true;
      });
    }

    Prlx.prototype.computeAdjustment = function(property, unit) {
      var _this = this;
      return function(adjustment) {
        if (prefixed_properties[property]) {
          return _this.el.css({
            "transform": adjustment,
            "-moz-transform": adjustment,
            "-webkit-transform": adjustment,
            "-ms-transform": adjustment
          });
        } else if (property === 'rotate' || property === 'skew' || property === 'scale') {
          return _this.el.css({
            "transform": "" + property + "(" + adjustment + (unit || '') + ")",
            "-moz-transform": "" + property + "(" + adjustment + (unit || '') + ")",
            "-webkit-transform": "" + property + "(" + adjustment + (unit || '') + ")",
            "-ms-transform": "" + property + "(" + adjustment + (unit || '') + ")"
          });
        } else {
          return _this.el.css(property, "" + adjustment + "px");
        }
      };
    };

    Prlx.prototype.positionOfElement = function() {
      return (this.el_top - this.scroll_top + this.el_height) / (this.scroll_bottom - this.scroll_top + this.el_height);
    };

    Prlx.prototype.isElFullyVisible = function() {
      var _ref;
      if (((this.scroll_bottom - this.el_height) > (_ref = this.el_top) && _ref > this.scroll_top)) {
        this.el.trigger('prlx:fullyVisible');
        return true;
      }
    };

    Prlx.prototype.isElPartiallyVisible = function() {
      var _ref;
      if ((this.scroll_bottom > (_ref = this.el_top) && _ref > (this.scroll_top - this.el_height))) {
        this.el.trigger('prlx:partiallyVisible');
        return true;
      }
    };

    Prlx.prototype.positionOfPageScrolled = function() {
      return this.scroll_top / (this.document_height - this.window_height);
    };

    Prlx.prototype.isFunction = function(obj) {
      return !!(obj && obj.constructor && obj.call && obj.apply);
    };

    Prlx.prototype.isObject = function(obj) {
      return obj === Object(obj);
    };

    return Prlx;

  }).call(this);

  (function($) {
    return $.fn.prlx = function(options, fn) {
      return $.each(this, function() {
        return new Prlx($(this), options);
      });
    };
  })(jQuery);

}).call(this);
